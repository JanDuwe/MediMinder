/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.03.2025 14:37:55

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1536;
#else
constexpr int kTensorArenaSize = 512;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,78 } };
const TfArray<1, float> quant0_scale = { 1, { 0.68638879060745239, } };
const TfArray<1, int> quant0_zero = { 1, { -110 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { -242, 211, 120, -135, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00056602462427690625, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[4*10] = { 
  -35, -59, -97, 73, 90, 70, 68, 50, -41, 67, 
  -84, -94, -63, -31, -39, -23, -74, -65, 36, 4, 
  -42, -56, 94, -88, -100, -4, 39, -83, -23, -60, 
  -127, -83, 54, -28, -50, 30, 35, 29, 15, 83, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0062607666477560997, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[10] = { 176, -80, 42, -43, -67, 25, -91, -59, 163, -31, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00046753778588026762, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[10*20] = { 
  80, -63, -63, 82, 83, 30, -98, -27, 60, 53, 68, 1, -37, -32, -20, -89, 45, 45, 30, 36, 
  62, -3, -95, -31, 88, -115, 54, -102, -82, 69, -2, -117, 19, 82, -75, -48, -82, -113, 49, 11, 
  -103, -48, -98, 114, 35, 108, 90, -78, 104, 7, -127, -104, 6, 86, 60, -4, 5, -16, 3, 29, 
  9, -113, -57, -44, -28, -27, 110, 29, 68, -118, -66, 48, -90, -85, -86, -103, -55, 96, 33, 66, 
  71, -94, -122, 57, -7, 9, -32, -121, -95, -58, 101, -113, -54, 57, 28, -9, -99, 86, 85, 78, 
  -19, 53, 13, -94, 18, -65, 70, -95, -17, 30, -43, -80, -99, -46, 18, -6, 33, -93, -113, 40, 
  100, 8, 101, 51, 51, -2, 107, -20, 57, 12, -104, 72, 47, -91, -5, -11, -37, 74, -31, 66, 
  -30, -100, 74, 2, 36, 32, 12, 108, -74, 91, 69, 89, -114, 27, 19, 3, 32, -123, -57, 89, 
  110, 78, -20, -78, -59, 37, 65, 100, -91, -79, 55, 23, 13, 115, 5, 59, 44, -47, -96, -46, 
  -81, 31, 26, -110, 69, 95, 27, 109, 23, 14, 90, 77, 26, -56, -113, -93, -34, 63, -79, 24, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0038063188549131155, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[20] = { -37, 68, -17, 26, 44, 17, -18, 71, 42, -20, 22, -32, 52, 114, 42, 95, 124, -41, -87, -8, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00059519795468077064, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[20*40] = { 
  33, -59, 85, 105, -17, 17, 60, 53, -4, -65, 89, 56, -104, 56, -52, 64, -97, 101, -28, 55, 52, -27, -1, 36, -6, -56, -14, 1, 1, -90, 79, 6, -21, -35, -55, -16, 89, 84, 51, -28, 
  -39, 58, 44, -45, -74, -51, 55, 58, -42, -34, -1, -86, 99, -59, -42, 92, -41, 9, -15, 82, 53, 2, -51, 68, 98, -95, -25, 15, 31, 61, 4, 55, 83, 97, 69, -91, 76, 16, -66, -6, 
  -24, 4, -46, -19, -48, 31, -21, -13, 74, -94, -41, -3, 97, -33, -12, 12, -41, 21, -33, -90, 70, 91, 78, -91, 88, -34, 81, 74, -50, 45, -84, 101, -22, 92, -86, -71, 18, 88, -23, 1, 
  24, 84, -54, -61, -17, 95, -63, -1, -32, 94, 101, -61, 23, 13, -21, 66, 58, 35, -77, 42, -65, 5, -76, 9, -76, 60, -44, -64, -43, -42, -58, 20, -77, -23, -42, -76, -35, -64, -109, -37, 
  -47, -86, -48, -33, -82, 97, -20, 29, -48, 59, -84, 80, -16, -21, 46, 36, -70, 52, -59, -4, -53, 103, -37, -20, 88, -28, 63, 25, -4, 35, -67, -72, -40, -79, 58, 108, 2, 127, 79, 54, 
  -81, -62, -23, -10, -83, 71, -52, -21, -33, -60, -107, 51, -28, -10, 12, -104, 6, 43, -73, 12, 78, -69, -89, -90, -44, 77, -37, 81, 45, 29, 99, -93, 44, 38, 69, -24, 44, 41, 45, -35, 
  78, -52, 68, 12, -24, 47, -66, 4, 51, -17, -7, -2, 57, -57, -104, -59, -22, 42, 0, 87, -30, -19, -44, 26, -69, 69, 80, -19, -103, -33, 3, -86, 30, 89, -49, 70, 11, -81, 29, 48, 
  5, 51, -4, 80, 110, -56, 60, -89, 77, 16, 11, -61, 69, -23, -72, -37, 96, -92, 31, 98, 96, 56, -59, -69, 61, -87, -11, -96, 79, -59, 94, 88, -74, -40, 107, -38, -75, 40, -41, 36, 
  41, 39, 83, -107, -20, 94, -10, -33, -76, -42, 16, 34, 90, 51, 11, -43, 28, -101, 10, -85, -109, -24, 47, 58, 63, 25, -16, -9, 4, 28, 84, 34, -98, 25, 40, 105, 60, 10, -105, -43, 
  34, -13, 72, -19, 56, -48, -71, 52, -20, -11, 100, -88, 35, -48, 21, 44, -36, -77, -11, -50, 88, -3, -106, -23, -16, -3, 86, 8, -78, -79, 8, 79, -48, -121, -79, -102, 58, 43, -79, 17, 
  -62, 22, 17, -80, -44, 22, 109, -70, -18, 27, -78, 31, 43, 95, 56, 78, -74, -77, 6, -54, 36, -14, -78, 47, 76, -64, 104, -80, -32, 70, -60, 28, 41, 76, 28, 19, 29, -88, 54, -48, 
  -105, 60, -42, -89, 9, -47, 14, 74, 26, -27, -57, 47, 33, -61, -45, -24, -93, -13, 41, 3, 71, 35, -3, -50, 39, 39, -16, 27, 22, -74, 2, 46, -4, -17, 54, -23, -43, -50, 41, -87, 
  -86, 88, -49, 14, 0, 54, -64, -59, -75, -72, 61, -97, -41, 50, 82, 65, 59, 58, 33, 35, -62, 87, 67, -100, 16, -50, 101, 8, -21, -12, -92, 40, 12, 93, 32, 29, -49, -64, -60, -75, 
  23, 6, 91, -43, 90, 34, -79, -34, -51, 78, 79, -40, -68, 10, 53, 86, 90, -9, 71, 5, 14, -23, 51, 75, 14, 19, 27, 78, -97, 34, 73, -68, -46, -19, 85, -29, -14, 4, 12, 116, 
  51, -38, 63, 12, 74, 43, 41, -90, 92, 47, -15, -80, -68, 42, -65, 45, 31, 70, -73, 3, -47, 9, -86, 43, 6, -23, -22, 67, 30, -19, 21, 78, -67, 101, -69, 27, 18, -53, 60, -3, 
  75, 53, -106, 56, -20, 46, 55, -64, 65, 10, 74, -16, 48, 10, -41, 61, -71, 56, 51, 113, -32, -7, 102, -83, -14, -16, 71, -101, -20, 31, 65, -91, 80, 116, 13, -105, 46, 80, -61, -46, 
  55, -63, 93, -31, 28, 52, -31, -4, -21, -26, -22, -84, 41, 70, 73, 34, -23, -26, -18, -80, 104, 51, -12, 57, -96, -1, 66, -31, -71, 117, -60, -20, 83, 29, 16, 31, 43, 27, -14, -83, 
  75, 49, 79, -105, -33, 98, -18, 50, 5, 75, 59, -67, 78, 98, -49, -7, -77, -65, 82, -25, 51, -30, -71, -68, -40, -82, -74, -105, -25, 41, -57, 82, 24, -24, 8, 38, -88, 8, -90, 54, 
  28, 33, 31, -21, -9, 27, -90, 90, 56, -26, -81, 63, -83, -95, -51, 105, -7, -70, 78, 76, -49, -43, 9, 96, 79, 104, -88, 48, 84, 76, 88, 28, -96, 63, -1, 3, -14, 107, 78, 44, 
  -67, -2, 93, 7, -89, 46, -42, -13, 79, 69, -96, 15, -72, 0, -85, -62, -31, 99, -35, 40, 46, -96, 63, 95, -15, -25, 14, 72, -60, 79, -42, 82, 33, -12, -14, 51, 84, 98, -30, -12, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,40 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0030414960347115993, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[40] = { -7, -9, 10, 1, 35, 9, 4, -21, -8, 7, 14, -15, 1, -5, 0, 3, 28, -19, 4, 28, 16, 20, 2, -3, -3, -17, -9, -5, -23, 26, 9, 1, 8, 2, 6, 6, 6, 4, -5, -9, };
const TfArray<1, int> tensor_dimension7 = { 1, { 40 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0015872835647314787, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[40*78] = { 
  10, -19, 25, 23, 27, 7, -75, -11, 34, -37, 92, 89, -79, -35, -84, 15, 54, -93, -51, -1, 51, -64, -75, -26, -55, -9, 47, -82, 88, 91, 35, 20, -5, 11, 90, 31, -50, -12, 75, -8, 42, -7, -21, -89, -61, 45, -38, 1, 103, -63, 4, 29, -18, -56, -45, 74, 11, -33, -28, -81, 59, 35, -82, 73, 89, -78, 75, 73, -1, -25, 56, -55, -27, -13, -48, -33, -17, 38, 
  -103, 67, -38, 25, 38, -70, 2, 47, 65, 92, -21, 75, 41, -16, -19, -21, 83, 69, -70, 32, -33, 100, 62, 80, 16, -79, -3, -18, -89, 73, -24, -44, -24, 70, 60, 96, 66, 21, -25, -11, -21, -55, 39, -20, 13, 24, 80, 0, -50, 11, 14, -8, -74, 66, -15, -34, 89, -34, 18, -79, 17, -37, 38, -9, -85, -40, 53, 82, -65, -14, -97, -15, -2, 53, -44, -52, -51, -43, 
  71, -81, 39, 70, 102, -73, -72, -60, 28, -2, 92, 50, 8, 94, -54, -22, 52, -18, -86, 52, 45, -93, 31, -54, 30, 45, -17, 46, 22, 16, 91, -17, -29, 17, -33, -9, 4, -20, -85, -50, 40, 51, 13, -25, -74, -67, 22, 96, 30, 32, -94, -51, 54, 82, 5, -36, 20, -53, 51, -17, -44, 102, 89, 29, -76, 61, 2, 41, -34, 69, -14, 87, -79, -82, -36, 40, -35, 36, 
  -74, -57, -14, -7, 53, 82, 46, 41, -65, 42, -58, -52, 64, -69, 105, -33, 81, 59, 92, 17, -82, -2, 90, -4, 54, -63, -10, 37, -98, -39, 87, 99, -55, 65, -45, 71, -35, 39, -3, 41, 10, 64, -13, 1, 63, 40, -77, 82, -54, 79, -27, 82, -42, -2, 23, -80, -3, 8, -87, 68, -88, 5, -78, 1, 25, -35, -38, -22, -60, 17, 58, 21, 16, -42, -33, -26, 75, -61, 
  87, 17, -49, 103, -28, -25, -61, -69, 50, -16, -20, -28, -39, 55, -94, 40, 92, -38, -54, -2, -11, -103, 37, 56, -37, 43, -64, -23, 68, 108, -60, 94, 5, -45, -100, -89, 60, 33, -37, -51, 78, 79, 54, 31, 77, -25, 34, 39, 32, -62, -13, 31, 99, -60, -45, -37, -34, 60, -13, -28, 109, -34, -61, 111, -24, -42, 44, 5, 69, -75, 25, 54, 57, 66, -89, -22, -45, 35, 
  -24, 11, -18, 15, -33, -84, -87, 24, -80, -24, -68, -3, 74, 39, -71, -23, 87, 36, 88, 62, 89, -44, 39, -52, 20, 105, 30, 39, 34, 60, 30, 64, -22, -27, 83, 87, 66, -100, -17, 64, -79, -58, -3, 31, 101, 19, -51, 10, -7, 3, -8, 83, 28, 88, 29, -3, 37, 73, 54, 32, -89, -69, 9, -10, -41, 15, -64, 14, 47, 75, 65, 14, 28, 98, 96, 87, 46, 80, 
  42, -29, -54, -29, -30, -13, -10, 27, -50, 84, -56, -55, -49, 89, 99, 72, -5, -83, -103, -92, -25, -22, -62, 78, -24, -78, -81, 26, 9, 52, -63, 62, 38, -96, -79, 7, -39, 19, 36, 40, 67, 8, -55, 57, -50, -76, -46, -37, -50, -91, -63, -1, 87, -16, -41, -7, 58, 19, 48, -87, -56, -85, -41, -14, -32, 34, -13, 75, -80, 65, 27, -50, -82, 56, 64, -78, -18, -50, 
  81, 32, 72, 13, -44, -13, -26, -56, -23, -56, 89, -41, -12, -34, -91, 15, 8, -45, -14, 71, -11, 104, 41, 28, -48, -57, -26, -22, -93, 48, -82, 54, 57, 30, -36, -49, -7, 8, -25, -50, 86, 38, 8, 25, 55, -34, 3, -89, -43, -4, -38, -11, -17, -44, 74, -69, 4, 71, 60, -50, -44, -20, 28, -74, -28, 68, -9, -80, -30, 9, -20, 48, 29, -10, 59, 48, 5, 55, 
  52, 52, -85, -15, -10, 19, 66, 27, 51, 105, 98, 96, 69, 63, 74, 44, -22, -71, -77, -57, -41, -80, -77, -26, -42, -82, 95, 51, 7, -14, 59, 93, 16, 93, 70, -30, 26, -20, -60, -54, -41, -82, 78, -4, 59, 4, -82, 78, 92, 49, -59, -36, 7, -13, 29, -44, 18, 77, 34, 82, 70, 7, 54, 21, -85, -94, -88, -72, -76, 19, 85, 71, -72, 46, -80, 92, -47, -41, 
  -75, -83, -54, -84, -50, -87, -101, -66, -15, 63, -25, 14, 92, 11, 2, -38, -64, 73, 61, -19, 17, -57, -45, 58, 78, 45, -88, -57, 56, -83, -85, -72, -4, -96, -71, -65, 79, -22, 84, -91, 43, -78, -64, -70, 42, 72, -32, 6, -8, -79, 55, -88, 18, -100, 34, 46, -49, 77, 71, 60, 71, -53, -59, 63, -54, -40, -32, -85, 86, 13, 70, 30, 5, 84, -100, -100, -53, 78, 
  83, 37, -78, 62, -4, -104, -7, 12, -36, -1, -119, -124, 43, -59, 59, -68, -75, 92, -54, -105, 6, -28, -66, -29, 22, -66, -35, 67, -54, 24, 22, 30, -10, -122, 7, 38, -59, -39, -11, 29, -45, 32, -45, -48, -52, -18, 29, -31, -70, -104, 61, 26, 37, 14, 63, -21, 31, -106, -41, -49, -62, -73, 64, -87, 28, 52, -75, 24, -14, 76, -54, -59, -33, -27, 21, -21, 27, -72, 
  -8, 94, -71, 86, 61, 88, 67, -31, -29, 101, -4, 106, 45, 75, 103, -23, 0, 29, -50, 41, 60, 100, -32, 38, -64, -53, 44, 83, 41, -1, 61, 8, 84, 79, -2, -57, -35, 97, 61, 56, 48, -94, -91, -43, -14, 43, -99, 15, 41, -16, -9, 76, 59, -2, -3, -32, 28, -96, -99, 50, 87, -2, -15, -59, 88, -45, 15, -99, -78, -44, -9, -17, 61, 2, -67, 68, -8, -11, 
  -45, -7, 54, -62, -85, -24, 22, -35, 10, 78, 42, -64, 46, 8, 83, -43, -92, 62, 78, -82, -12, -79, -97, 88, -15, 63, -97, -66, -63, -19, -33, -77, 13, 63, 6, -3, 42, 25, -40, -81, 15, 77, 89, -91, 4, -69, 19, -67, 34, 62, -66, 45, -8, -5, 50, -11, -6, -66, -47, 85, 53, 32, 30, -98, -54, -4, 84, 23, 52, 71, 61, 78, -38, -94, -32, 21, -5, -7, 
  23, -54, 84, -82, -13, 22, 90, -14, -93, -74, -70, -1, -36, -63, -12, 29, -74, -16, 50, 84, 95, 86, 87, 1, 102, 38, -75, 86, 14, 48, 2, -12, 67, 82, 23, -76, 65, 50, -48, 42, -42, -25, 51, 73, -1, 11, -62, -88, -39, 6, 21, 27, -58, 6, -24, 58, -56, -59, 57, 61, 3, -39, 92, -72, 40, -81, 22, -66, 40, -44, 89, 63, -19, 52, 62, -29, -66, -7, 
  85, -44, 13, -47, 38, 92, -84, -97, -88, 53, 80, -50, -93, -3, 84, 100, -43, -14, -78, 75, -99, -95, -16, -37, -95, -20, 27, -72, 92, 83, 6, -61, 10, 80, -20, 8, 85, 82, -42, -9, 42, -63, 14, 66, -89, -51, -22, -89, 66, 70, -95, -69, -82, 43, -53, -44, 93, -95, 87, 64, -59, -16, -73, -11, 83, -30, -9, 59, 94, -67, -37, -36, 62, 30, 52, -34, 70, 48, 
  0, -66, -93, -14, 29, -28, -78, 19, -9, 9, -112, -104, -3, -43, -20, 32, -32, -6, -15, 7, 36, 7, 45, -112, -94, 17, 68, 31, 92, -73, -3, -7, -10, -13, -20, -112, 52, 14, -67, 79, -67, 9, 95, 6, 45, -14, 8, 80, -91, 39, 61, 81, 61, 7, 86, 25, -103, 46, -44, -16, -64, -25, 23, -70, -41, -16, 9, -72, -53, 11, -60, -49, 69, 82, -17, 38, -50, 49, 
  -1, -44, 93, -16, 49, -85, 22, -37, -87, 29, -96, 23, 26, -13, -83, 45, 89, -20, 28, -48, -8, 7, -21, 66, -18, -5, -20, -13, 0, 83, -41, -59, -75, -8, -19, -96, -67, 55, -62, -62, 18, -74, 9, 11, 104, 26, 104, 28, 21, 96, -5, -7, 95, 62, -8, 73, 86, -72, -10, -38, 63, -43, 105, 5, 102, -23, -1, -46, 78, 90, 91, 68, -38, 102, 7, -42, 77, 5, 
  -23, 93, 57, -50, 21, -35, -35, -68, -62, 96, 60, -63, -44, -59, 7, -15, -9, -4, 85, 62, -94, 98, 32, 13, -69, -40, 84, 29, 61, -34, 17, 47, -18, -6, 40, 84, 73, 55, -67, 63, -72, -96, 38, -47, 11, -13, -101, 58, 30, 76, 74, -3, -64, -73, 16, -100, 63, -77, 55, -60, -70, 14, -9, 33, 80, 44, -70, -8, 81, 15, -108, -101, 38, 16, 70, 35, -105, 18, 
  -84, 55, 49, -69, -17, -93, -85, -76, 2, -57, -52, -56, -46, 1, -79, 38, -55, 103, 22, -81, -76, -64, -2, 93, -81, 1, 39, 71, -57, -21, -23, -69, 43, 79, -1, 55, 69, -95, 83, -35, 22, 85, 44, 76, -12, -97, 55, -76, 47, 86, -103, 17, -51, -55, -7, -68, -99, -61, 35, -94, 73, -33, 20, -28, -1, -81, -1, -14, 27, -37, 63, -18, 76, 19, -20, -8, 75, -7, 
  -11, 1, -15, 44, 79, -99, 46, -22, -23, -72, -57, 55, -27, -63, 40, -30, 99, 18, -108, -13, -82, 7, -19, -110, -28, 5, -91, 44, 53, -45, -59, -93, -94, -37, -91, -114, -50, -42, -102, -82, 57, -9, -7, 73, 6, -113, -86, 8, -86, 76, -51, 45, -27, -96, -1, 112, -79, 19, -31, -66, 73, 18, 5, -110, -73, -68, 73, 7, 60, -52, 17, 13, -19, -88, -41, -116, -42, -15, 
  -11, 77, 53, -50, -64, 26, -74, 73, 60, -58, -38, 4, 48, -51, -85, 19, -74, 43, 53, -77, -24, -46, 62, 66, -88, -108, -15, 58, 68, 63, -36, -71, -72, 24, -19, -91, -36, -62, 35, 81, -15, 28, 22, -7, -87, -22, 80, -91, 54, -36, -96, 50, -41, -6, -28, 35, 62, 92, 34, 31, 4, 89, -17, 4, -16, -59, 27, -48, 97, 4, -9, -69, -28, 37, -58, 46, 45, -43, 
  -10, 5, 22, 40, 97, 38, 15, -53, 41, -64, -19, -27, 39, 70, -60, 92, 101, -25, -12, -46, -57, 62, -32, -74, -8, -20, -33, -93, 70, -63, 80, -17, -3, -101, -34, -64, -19, 68, -67, 87, -96, 9, 16, -69, -16, 37, 29, 61, -72, -79, 97, -8, 45, -60, -3, -74, 37, 92, 29, -58, -81, -43, -2, 44, 96, -34, -10, 75, -24, 60, 18, -38, 64, 50, -52, -31, -34, 71, 
  -25, -72, -65, 76, -19, 7, 40, 59, 48, 34, -97, -82, -31, 61, -71, 69, -66, -24, -9, -77, 45, -22, -24, -82, -29, -26, -15, -73, 4, -23, -28, 5, 46, -64, -43, -103, 73, -92, 43, -55, -58, -15, 9, -14, -12, 69, -44, 53, 35, 17, -93, -80, -43, 56, -33, 46, -81, -97, 80, 24, 60, -108, 66, 49, -19, -44, 38, 35, 76, 43, 76, 80, -6, 0, 5, -56, 4, 89, 
  52, 61, 61, 92, -82, 87, 71, -10, -33, 75, 54, -22, 63, 63, 43, 37, -37, 19, -76, 83, 75, 91, -57, -47, 61, 12, -99, -81, -90, -12, 32, 76, -76, -71, -79, -43, -60, 40, 105, 91, 75, -27, -76, -32, -37, 36, 17, -32, -17, -20, -4, -52, 1, -32, 17, 19, 77, 91, 9, 0, 82, 36, 9, -53, 36, -83, 78, -51, 17, 58, 72, -27, 31, -55, -63, -50, 96, 43, 
  18, -61, -73, -25, 56, 19, -41, 53, 65, -21, 90, -14, 6, 64, -77, -64, -72, -48, -87, 57, 31, -33, -58, 60, 67, 72, -26, 89, 74, 53, -82, 90, 56, 97, -21, 27, 35, 46, -25, -39, -91, -68, -57, -65, -33, 5, 64, 4, -20, -74, -83, -27, -51, -23, 31, -6, -7, -8, -65, -10, -26, -10, 8, -73, 41, -18, -15, -26, 50, 71, 16, 11, -91, 18, -84, 47, -62, 98, 
  74, -7, -73, 86, 13, -25, 58, 12, 41, 22, -65, -33, -11, -2, 67, -20, -54, -77, -36, 104, 56, -8, -76, -46, 81, 5, -42, 59, -2, -1, -96, -68, 11, 90, 55, -31, -57, -48, -2, 5, 40, 59, -77, 0, -13, 13, 82, -2, 36, 65, 36, -49, 18, -64, 41, -14, 55, 19, -73, -58, 54, 16, 92, -34, -84, 39, -35, 75, -80, 83, 10, -41, -41, 101, -33, 39, -74, 6, 
  -23, -34, -107, 63, 3, -3, 61, -10, -44, 80, 23, 67, -2, -102, 22, -75, -24, 42, 36, 96, 20, 5, -82, -52, -20, 81, 59, -5, 73, -38, 10, -55, 29, 64, -50, 87, 47, 60, 78, -56, 72, 31, -35, 21, -47, 55, 85, -96, -62, -12, -56, -27, -9, -44, -22, 48, -97, -19, -36, -30, 22, 3, -76, 44, -78, -104, 59, 80, 40, 101, 53, -102, 6, -88, 60, 79, 81, -89, 
  -95, 83, 26, 34, 73, 103, 49, -80, -40, 101, -51, 8, 104, 27, -34, 84, -83, -87, 37, -21, 39, 105, 2, -69, 59, -15, 10, -54, 59, -94, -26, -63, 34, -30, 104, 24, 47, 25, 63, 44, -87, 1, -94, 41, -29, -77, -49, -37, -79, 93, 63, -79, -33, -76, -38, -78, 46, -36, -11, 44, 31, -76, 42, -74, -11, -7, 21, 59, -24, -12, 63, 85, 67, -64, 27, -32, 64, 34, 
  86, -10, 61, -73, -28, 59, -34, -38, -40, 25, 71, 45, 67, -11, -79, -102, -15, -38, 86, 14, -44, -31, 34, -6, 35, -88, -61, 41, 46, -52, -37, -36, -88, 74, -42, -22, -71, -79, -36, 84, -59, -55, 8, 32, 48, -92, -25, -10, 20, -55, -60, 41, 59, 2, -10, 46, 27, 79, -71, -34, 68, -38, -96, 87, 66, 70, -43, -10, 70, 72, -9, -56, 10, -68, -58, 53, -65, 56, 
  53, -15, 65, 16, -84, -60, -16, 86, 59, -60, 58, 86, 61, 48, 19, -47, 19, 53, 98, 36, 61, 42, -81, 54, -60, 105, -97, 16, 21, 47, -35, 73, -22, -24, 34, 56, -10, -83, -43, 65, 86, -45, 86, -53, 32, 55, 6, 105, -75, -29, -62, -23, 5, -53, 45, -36, -28, 77, 70, 64, -79, 98, 57, -18, 52, -42, -11, 55, 12, -96, -42, 22, 60, 17, 15, -63, -49, -59, 
  10, -84, -44, 19, 32, 5, -97, -77, -21, 0, 24, 55, -38, -43, 70, -55, -21, 80, -100, 2, -36, -53, 45, -113, 15, -82, -18, 91, -16, -13, 32, 40, -117, 20, 4, -11, -61, 64, -82, 84, -73, -73, 62, 14, -68, 70, -72, -15, 15, 25, 37, 18, -55, -87, -2, -2, 30, -6, 63, -75, -101, -93, 24, -1, -109, -52, -92, 25, -93, 41, -91, 5, -115, -58, -62, 28, 60, -76, 
  38, -33, -90, -36, -19, 91, 89, 47, -30, 8, -15, 9, 46, 50, 54, -29, -38, -20, 24, 53, 71, -13, -30, 44, -10, 64, 39, 54, -22, -77, 51, -22, 60, -24, -15, 7, -57, 28, 80, 23, 84, -56, -85, 46, 66, -73, -70, 31, 67, -23, -3, 71, 37, 87, -74, 20, 28, -61, 9, 35, 88, -18, -24, -71, 73, 63, -25, 18, 76, 62, 15, 43, -86, -36, -47, -53, 10, 37, 
  -97, -24, -93, -92, 46, -106, 32, 48, -57, -52, 27, 33, -56, -55, -11, 41, 86, 55, -83, -81, -8, -71, -64, 28, 70, -112, 14, -99, 33, 46, -68, 43, 1, 9, 37, -76, 31, -127, 42, -88, 42, 57, 74, -60, 51, 79, 7, -96, 2, -31, 47, 22, -84, 92, 7, -31, -48, 8, -39, 43, -18, -60, 30, 43, 73, 46, 12, 98, -4, 95, 12, -34, -37, 58, -107, -81, 21, 83, 
  -104, -13, 88, 87, 15, 15, 16, -78, -24, -44, -85, -39, -105, 87, 10, -103, -87, 32, -12, -36, 41, -76, -54, 48, 51, 38, -54, -36, 71, -14, -28, -85, 68, 68, 85, -26, -26, -78, -53, -55, 41, -41, 12, 79, -105, 12, 44, -78, 83, -57, 75, -80, 32, -18, 44, -89, 26, 36, -68, -98, -50, -46, 2, 60, 67, -71, -18, -90, -39, 68, -19, -97, 62, -57, 84, -77, -78, 81, 
  -89, 18, -46, 36, 34, -104, 84, -53, -10, -100, 79, 52, -76, -78, -36, -54, 60, -66, 24, -93, 78, 59, 54, -64, -43, 40, -26, -92, -6, -52, 43, 81, 75, 47, 35, -71, -54, 26, 6, -2, 9, -43, -77, 5, 17, 30, 53, -3, 75, 96, 86, 68, -35, -86, -63, 2, 55, 60, -80, 81, -11, -56, -76, 93, -62, -62, -8, 48, 44, 71, 38, -45, 66, -59, 70, -69, 64, -56, 
  85, -92, 30, 24, 42, 46, 55, 83, 51, 63, 88, 51, 4, -24, -70, -45, 59, 32, -69, 104, -28, -52, -42, -7, 84, 9, 82, -55, 45, 87, -53, -38, 45, -49, 69, 85, 91, 74, 27, 38, -60, 94, 78, 52, 103, 104, 70, 76, 54, 51, 90, -24, -52, 28, -54, -72, 31, -54, -76, -2, 28, -27, -16, -38, -65, -22, 78, -29, -27, 11, 39, 6, 30, 24, -62, -21, 87, 49, 
  -66, -3, -11, -67, -83, -39, 39, 27, -57, -38, -64, -50, -39, 80, 61, -7, -49, -40, -79, 8, -14, 71, -79, -92, -41, -15, -69, -99, -23, -64, 87, -3, 37, -43, 84, -28, 74, 42, 16, 20, 85, -39, 69, -54, -22, 95, 18, -45, -29, -45, -12, -12, 65, 76, -47, 26, -89, 31, 84, -84, -15, -13, 16, -88, 83, 74, 16, 4, -67, -89, -21, -35, 35, 61, 16, -16, 44, -42, 
  65, 66, -41, 87, -6, 108, 80, -20, 42, -38, -22, 115, -56, 39, -44, -81, 27, 99, -46, -76, -22, -25, -58, 95, 53, -50, 62, -55, -73, -45, -78, 102, 60, 11, -7, -12, 108, 37, -53, -63, -88, 13, 93, 24, 49, 99, -43, 56, -27, -82, 46, -51, -83, 82, -87, -41, 8, 36, 101, -8, 94, 94, 49, 90, 92, 58, 80, -35, 68, -5, -82, 72, 4, 47, 1, 88, -63, -19, 
  -13, -86, 13, -9, -29, -27, -60, -43, -49, 47, 90, 85, -75, -16, -49, -56, -87, 81, -57, -25, 27, 58, -6, 30, -81, -73, -43, -69, -78, 68, -51, 87, -40, -69, 95, 64, -33, 40, 29, 43, 50, 17, 22, 22, -68, 84, -24, -62, 31, -49, 106, 20, 11, -84, 64, 13, -46, -64, 47, -79, -46, 26, 102, -30, 17, -35, -29, -52, 99, 43, -23, -35, 78, 37, -18, 43, 50, -41, 
  80, -39, -35, -22, 54, 85, 5, -34, -74, 32, -82, -69, 9, -54, 67, -1, -72, 19, 11, -20, -73, 50, -80, 26, 2, 43, 33, -45, -86, 76, 60, 44, -3, -59, -50, 71, -6, 40, -86, -50, -4, -65, 27, -18, -5, 9, -29, -86, -74, -62, 71, -78, 61, -56, 49, 68, -63, 14, -56, -9, 12, -48, 65, 2, 2, 5, 50, 98, 70, -35, -74, 12, 62, 64, 27, 40, -45, -98, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 40,78 } };
const TfArray<1, float> quant8_scale = { 1, { 0.002312513766810298, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,40 } };
const TfArray<1, float> quant9_scale = { 1, { 0.19569249451160431, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,20 } };
const TfArray<1, float> quant10_scale = { 1, { 0.12283200770616531, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,10 } };
const TfArray<1, float> quant11_scale = { 1, { 0.090408198535442352, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,4 } };
const TfArray<1, float> quant12_scale = { 1, { 0.11622800678014755, } };
const TfArray<1, int> quant12_zero = { 1, { 57 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,4 } };
const TfArray<1, float> quant13_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,8,7 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 9,6,5 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 10,4,3 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,2,1 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 78, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 3120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80), (TfLiteIntArray*)&g0::tensor_dimension9, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension11, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension12, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension13, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[5] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[5] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 14, };
const size_t tflNodes_subgraph_index[] = {0, 5, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  13, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_1894_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 14;
  for (size_t i = 0; i < 14; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_1894_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_1894_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_1894_invoke() {
  for (size_t i = 0; i < 5; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_1894_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
